import json
from sklearn.feature_extraction.text import TfidfVectorizer
import numpy as np

ground_truth_path = './val_filtered_annotations.json'
generated_captions_path = './generated_captions.json'


def load_ground_truth(filepath):
    """
    Load ground truth captions from a COCO-style annotations JSON file.
    :param filepath: Path to the ground truth JSON file.
    :return: A dictionary where keys are image_ids and values are lists of captions.
    """
    with open(filepath, 'r') as f:
        data = json.load(f)
    ground_truth = {}
    for annotation in data["annotations"]:
        image_id = annotation["image_id"]
        caption = annotation["caption"]
        if image_id not in ground_truth:
            ground_truth[image_id] = []
        ground_truth[image_id].append(caption)
    return ground_truth


def load_generated_captions(filepath):
    """
    Load generated captions from a JSON file.
    :param filepath: Path to the generated captions JSON file.
    :return: A dictionary where keys are image_ids and values are single captions.
    """
    with open(filepath, 'r') as f:
        data = json.load(f)
    generated_captions = {entry["image_id"]: entry["caption"] for entry in data}
    return generated_captions

def compute_cider(reference_captions, generated_caption):
    """
    Compute CIDEr score for a single image.
    :param reference_captions: List of reference captions for the image.
    :param generated_caption: The caption generated by the model.
    :return: CIDEr score as a float.
    """
    all_captions = reference_captions + [generated_caption]

    vectorizer = TfidfVectorizer().fit_transform(all_captions)
    vectors = vectorizer.toarray()

    generated_vector = vectors[-1]
    reference_vectors = vectors[:-1]
    similarities = np.dot(reference_vectors, generated_vector) / (
        np.linalg.norm(reference_vectors, axis=1) * np.linalg.norm(generated_vector) + 1e-8
    )


    return similarities.mean()


if __name__ == "__main__":

    ground_truth = load_ground_truth(ground_truth_path)
    generated_captions = load_generated_captions(generated_captions_path)


    all_cider_scores = {}
    for image_id, generated_caption in generated_captions.items():
        reference_captions = ground_truth.get(image_id, [])
        if reference_captions:
            try:
                cider_score = compute_cider(reference_captions, generated_caption)
                all_cider_scores[image_id] = cider_score
                #print(f"Image ID: {image_id}, CIDEr Score: {cider_score}")
            except Exception as e:
                print(f"Error computing CIDEr for image_id {image_id}: {e}")
        else:
            print(f"Warning: No ground truth captions for image_id {image_id}")

    if all_cider_scores:
        average_cider_score = sum(all_cider_scores.values()) / len(all_cider_scores)
        print("\nAverage CIDEr Score:", average_cider_score)
    else:
        print("No CIDEr scores computed; check your input data.")
