import json
from nltk.translate.bleu_score import sentence_bleu, SmoothingFunction

ground_truth_path = './val_filtered_annotations.json' 
generated_captions_path = './generated_captions.json'

def load_ground_truth(filepath):
    """
    Load ground truth captions from a COCO-style annotations JSON file.
    :param filepath: Path to the ground truth JSON file.
    :return: A dictionary where keys are image_ids and values are lists of captions.
    """
    with open(filepath, 'r') as f:
        data = json.load(f)
    ground_truth = {}
    for annotation in data["annotations"]:
        image_id = annotation["image_id"]
        caption = annotation["caption"]
        if image_id not in ground_truth:
            ground_truth[image_id] = []
        ground_truth[image_id].append(caption)
    return ground_truth

def load_generated_captions(filepath):
    """
    Load generated captions from a JSON file.
    :param filepath: Path to the generated captions JSON file.
    :return: A dictionary where keys are image_ids and values are single captions.
    """
    with open(filepath, 'r') as f:
        data = json.load(f)
    generated_captions = {entry["image_id"]: entry["caption"] for entry in data}
    return generated_captions

def compute_bleu(reference_captions, generated_caption):
    """
    Compute BLEU-1, BLEU-2, BLEU-3, and BLEU-4 for a single image.
    :param reference_captions: List of reference captions for the image.
    :param generated_caption: The caption generated by the model.
    :return: A dictionary with BLEU-1 to BLEU-4 scores.
    """
    smooth_fn = SmoothingFunction().method4
    return {
        f"BLEU-{i}": sentence_bleu(
            [ref.split() for ref in reference_captions],
            generated_caption.split(),
            weights=[1/i]*i,
            smoothing_function=smooth_fn
        )
        for i in range(1, 5)
    }

if __name__ == "__main__":
    ground_truth = load_ground_truth(ground_truth_path)
    generated_captions = load_generated_captions(generated_captions_path)

    all_bleu_scores = {}
    for image_id, generated_caption in generated_captions.items():
        reference_captions = ground_truth.get(image_id, [])
        if reference_captions:
            bleu_scores = compute_bleu(reference_captions, generated_caption)
            all_bleu_scores[image_id] = bleu_scores
        else:
            print(f"Warning: No ground truth captions for image_id {image_id}")


    if all_bleu_scores:
        average_bleu_scores = {
            f"BLEU-{i}": sum(bleu_scores[f"BLEU-{i}"] for bleu_scores in all_bleu_scores.values()) / len(all_bleu_scores)
            for i in range(1, 5)
        }
        print("\nAverage BLEU Scores:", average_bleu_scores)
    else:
        print("No BLEU scores computed; check your input data.")
