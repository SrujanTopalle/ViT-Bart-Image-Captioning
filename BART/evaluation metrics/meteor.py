import json
from nltk.translate.meteor_score import meteor_score

ground_truth_path = './val_filtered_annotations.json'
generated_captions_path = './generated_captions.json'

def load_ground_truth(filepath):
    """
    Load ground truth captions from a COCO-style annotations JSON file.
    :param filepath: Path to the ground truth JSON file.
    :return: A dictionary where keys are image_ids and values are lists of captions.
    """
    with open(filepath, 'r') as f:
        data = json.load(f)
    ground_truth = {}
    for annotation in data["annotations"]:
        image_id = annotation["image_id"]
        caption = annotation["caption"]
        if image_id not in ground_truth:
            ground_truth[image_id] = []
        ground_truth[image_id].append(caption)
    return ground_truth


def load_generated_captions(filepath):
    """
    Load generated captions from a JSON file.
    :param filepath: Path to the generated captions JSON file.
    :return: A dictionary where keys are image_ids and values are single captions.
    """
    with open(filepath, 'r') as f:
        data = json.load(f)
    generated_captions = {entry["image_id"]: entry["caption"] for entry in data}
    return generated_captions


def preprocess_caption(caption):
    """
    Preprocess a caption by removing extra spaces and tokenizing into a list of words.
    :param caption: The raw caption string.
    :return: A tokenized list of words.
    """
    return caption.strip().split()


def compute_meteor(reference_captions, generated_caption):
    """
    Compute METEOR score for a single image.
    :param reference_captions: List of reference captions for the image.
    :param generated_caption: The caption generated by the model.
    :return: METEOR score as a float.
    """

    new_reference_captions = []
    for ref in reference_captions:
        new_reference_captions.append(preprocess_caption(ref))
    reference_captions = [ref for ref in new_reference_captions]
    generated_caption = preprocess_caption(generated_caption)


    scores = [meteor_score([ref], generated_caption) for ref in reference_captions]
    return max(scores)


if __name__ == "__main__":

    ground_truth = load_ground_truth(ground_truth_path)
    generated_captions = load_generated_captions(generated_captions_path)


    all_meteor_scores = {}
    for image_id, generated_caption in generated_captions.items():
        reference_captions = ground_truth.get(image_id, [])
        if reference_captions:
            try:
                meteor = compute_meteor(reference_captions, generated_caption)
                all_meteor_scores[image_id] = meteor
                #print(f"Image ID: {image_id}, METEOR Score: {meteor}")
            except Exception as e:
                print(f"Error computing METEOR for image_id {image_id}: {e}")
        else:
            print(f"Warning: No ground truth captions for image_id {image_id}")


    if all_meteor_scores:
        average_meteor_score = sum(all_meteor_scores.values()) / len(all_meteor_scores)
        print("\nAverage METEOR Score:", average_meteor_score)
    else:
        print("No METEOR scores computed; check your input data.")
